// $Id: inode.cpp,v 1.12 2014-07-03 13:29:57-07 - - $

#include <iostream>
#include <stdexcept>

using namespace std;

#include "debug.h"
#include "inode.h"

int inode::next_inode_nr {1};

inode::inode(inode_t init_type):
   inode_nr (next_inode_nr++), type (init_type)
{
   switch (type) {
      case PLAIN_INODE:
           contents = make_shared<plain_file>();
           break;
      case DIR_INODE:
           contents = make_shared<directory>();
           break;
   }
   DEBUGF ('i', "inode " << inode_nr << ", type = " << type);
}

int inode::get_inode_nr() const {
   DEBUGF ('i', "inode = " << inode_nr);
   return inode_nr;
}

plain_file_ptr plain_file_ptr_of (file_base_ptr ptr) {
   plain_file_ptr pfptr = dynamic_pointer_cast<plain_file> (ptr);
   if (pfptr == nullptr) throw invalid_argument ("plain_file_ptr_of");
   return pfptr;
}

directory_ptr directory_ptr_of (file_base_ptr ptr) {
   directory_ptr dirptr = dynamic_pointer_cast<directory> (ptr);
   if (dirptr == nullptr) throw invalid_argument ("directory_ptr_of");
   return dirptr;
}

size_t plain_file::size() const {
   size_t size {0};
   DEBUGF ('i', "size = " << size);
   return size;
}

const wordvec& plain_file::readfile() const {
   DEBUGF ('i', data);
   return data;
}

void plain_file::writefile (const wordvec& words) {
   DEBUGF ('i', words);
}

size_t directory::size() const {
   size_t size {0};
   DEBUGF ('i', "size = " << size);
   return size;
}

void directory::remove (const string& filename) {
   DEBUGF ('i', filename);
}





//Constructor
inode_state::inode_state() {
   root = make_shared<inode>(DIR_INODE);
   cwd = root;
   directory_ptr_of(root->contents)->setRoot(root);
   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt << "\"");
}



//Get Functions

string inode_state::getPrompt() const {
   return prompt;
}

/*
inode_ptr inode_state::findPath(const string& path){
   inode_ptr curr;
   directory_ptr dir;
   size_t i = 0;
   size_t j = 0;
   if(path.at(0) == '/') {
      curr = root;
      j = 1;
   } else {
      curr = cwd;
   }
   for(;;) {
      i = path.find_first_of("/", j);
      if(i == string::npos) {
         break;
      }
      dir = directory_ptr_of(curr->getContents());
      curr = dir->getChild(path.substr(j, i - j));
      if(curr == nullptr) {
         return curr;
      }
      j = i + 1;
   }
   return curr;
}
*/

inode_ptr inode_state::findPath(const string& path){
   inode_ptr curr;
   directory_ptr dir;
   string pathCopy = path;

   if(path.at(0) == '/') {
      pathCopy = path.substr(1);
      curr = root;
   } else {
      curr = cwd;
   }
   wordvec p = split(pathCopy, "/");
   
   for(string word : p) {
      if(p[p.size()-1] == word) {
         break;
      } 
      dir = directory_ptr_of(curr->getContents());
      curr = dir->getChild(word);
      if(curr == nullptr) {
         DEBUGF ('i', "path not found for word: " << word);
         return curr;
      }      
   }
   return curr;
}

inode_ptr directory::getChild(const string& name) {
   auto entry = dirents.find(name);
   if(entry == dirents.end()){
      return nullptr;
   }
   return entry->second;
}

string inode::getName() const {
   return name;
}

file_base_ptr inode::getContents() const {
   return contents;
}


//Set Functions

void inode_state::setPrompt(string newPrompt) {
   prompt.erase();
   prompt.append(newPrompt);
}

void inode::setName(const string& newName) {
   name = newName;
}

void directory::setRoot(inode_ptr root) {
   dirents.insert(make_pair(".", root));
   dirents.insert(make_pair("..", root));
   root->setName("/");
}

void directory::setParentChild(inode_ptr parent, inode_ptr child) { 
   dirents.insert(make_pair(".", child));
   dirents.insert(make_pair("..", parent));
}


inode_ptr directory::mkdir(const string& dirname) {
   if(dirents.find(dirname) != dirents.end()) {
      cout << "already exists" << endl;
   }
   inode_ptr parent = dirents.at(".");
   inode_ptr dirnode = make_shared<inode>(DIR_INODE);
   dirnode->setName(dirname);
   directory_ptr dir = directory_ptr_of(dirnode->getContents());
   dir->setParentChild(parent, dirnode);
   dirents.insert(make_pair(dirname, dirnode));
   return dirnode;
}

void inode_state::mkdir(const string& path) {
   string name;
   //if (pathname.back() == '/')
   //   name = pathname.substr(0, pathname.size() - 1);
   //else 
   name = path;
   inode_ptr p = findPath(name);
   directory_ptr dir = directory_ptr_of(p->getContents());
   size_t found = name.find_last_of("/");
   if (found == string::npos)
      dir->mkdir(name);
   else
      dir->mkdir(name.substr(found+1));
}


ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
}

